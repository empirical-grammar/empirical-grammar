// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ComprehensionLanding component should render ComprehensionLanding 1`] = `
<MemoryRouter>
  <Router
    history={
      Object {
        "action": "REPLACE",
        "block": [Function],
        "canGo": [Function],
        "createHref": [Function],
        "entries": Array [
          Object {
            "hash": "",
            "key": "kinumx",
            "pathname": "/activities",
            "search": "",
            "state": undefined,
          },
        ],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "index": 0,
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "key": "kinumx",
          "pathname": "/activities",
          "search": "",
          "state": undefined,
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  >
    <withRouter(ComprehensionLanding)>
      <ComprehensionLanding
        history={
          Object {
            "action": "REPLACE",
            "block": [Function],
            "canGo": [Function],
            "createHref": [Function],
            "entries": Array [
              Object {
                "hash": "",
                "key": "kinumx",
                "pathname": "/activities",
                "search": "",
                "state": undefined,
              },
            ],
            "go": [Function],
            "goBack": [Function],
            "goForward": [Function],
            "index": 0,
            "length": 1,
            "listen": [Function],
            "location": Object {
              "hash": "",
              "key": "kinumx",
              "pathname": "/activities",
              "search": "",
              "state": undefined,
            },
            "push": [Function],
            "replace": [Function],
          }
        }
        location={
          Object {
            "hash": "",
            "key": "kinumx",
            "pathname": "/activities",
            "search": "",
            "state": undefined,
          }
        }
        match={
          Object {
            "isExact": false,
            "params": Object {},
            "path": "/",
            "url": "/",
          }
        }
      >
        <div
          className="main-admin-container"
        >
          <section
            className="left-side-menu"
          >
            <p
              className="menu-label"
            >
              Home
            </p>
            <ul
              className="menu-list"
            >
              <NavLink
                activeClassName="is-active"
                to="/activities"
              >
                <Link
                  aria-current="page"
                  className="is-active"
                  style={Object {}}
                  to={
                    Object {
                      "hash": "",
                      "pathname": "/activities",
                      "search": "",
                      "state": null,
                    }
                  }
                >
                  <LinkAnchor
                    aria-current="page"
                    className="is-active"
                    href="/activities"
                    navigate={[Function]}
                    style={Object {}}
                  >
                    <a
                      aria-current="page"
                      className="is-active"
                      href="/activities"
                      onClick={[Function]}
                      style={Object {}}
                    >
                      Activities Index
                    </a>
                  </LinkAnchor>
                </Link>
              </NavLink>
            </ul>
          </section>
          <Switch>
            <Route
              component={[Function]}
              computedMatch={
                Object {
                  "isExact": true,
                  "params": Object {},
                  "path": "/activities",
                  "url": "/activities",
                }
              }
              location={
                Object {
                  "hash": "",
                  "key": "kinumx",
                  "pathname": "/activities",
                  "search": "",
                  "state": undefined,
                }
              }
              path="/activities"
            >
              <Activities
                history={
                  Object {
                    "action": "REPLACE",
                    "block": [Function],
                    "canGo": [Function],
                    "createHref": [Function],
                    "entries": Array [
                      Object {
                        "hash": "",
                        "key": "kinumx",
                        "pathname": "/activities",
                        "search": "",
                        "state": undefined,
                      },
                    ],
                    "go": [Function],
                    "goBack": [Function],
                    "goForward": [Function],
                    "index": 0,
                    "length": 1,
                    "listen": [Function],
                    "location": Object {
                      "hash": "",
                      "key": "kinumx",
                      "pathname": "/activities",
                      "search": "",
                      "state": undefined,
                    },
                    "push": [Function],
                    "replace": [Function],
                  }
                }
                location={
                  Object {
                    "hash": "",
                    "key": "kinumx",
                    "pathname": "/activities",
                    "search": "",
                    "state": undefined,
                  }
                }
                match={
                  Object {
                    "isExact": true,
                    "params": Object {},
                    "path": "/activities",
                    "url": "/activities",
                  }
                }
              >
                <div
                  className="error-container"
                >
                  <Error$1
                    error="ReferenceError: fetch is not defined"
                  >
                    <p
                      className="error"
                    >
                      ReferenceError: fetch is not defined
                    </p>
                  </Error$1>
                </div>
              </Activities>
            </Route>
          </Switch>
          <section
            className="right-panel"
          />
        </div>
      </ComprehensionLanding>
    </withRouter(ComprehensionLanding)>
  </Router>
</MemoryRouter>
`;
