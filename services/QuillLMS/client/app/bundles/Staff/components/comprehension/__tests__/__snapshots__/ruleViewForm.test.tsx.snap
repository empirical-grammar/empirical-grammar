// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`RuleViewForm component should render RuleViewForm 1`] = `
<Router
  history={
    Object {
      "action": "POP",
      "block": [Function],
      "canGo": [Function],
      "createHref": [Function],
      "entries": Array [
        Object {
          "hash": "",
          "key": "m0c8ry",
          "pathname": "/",
          "search": "",
          "state": undefined,
        },
      ],
      "go": [Function],
      "goBack": [Function],
      "goForward": [Function],
      "index": 0,
      "length": 1,
      "listen": [Function],
      "location": Object {
        "hash": "",
        "key": "m0c8ry",
        "pathname": "/",
        "search": "",
        "state": undefined,
      },
      "push": [Function],
      "replace": [Function],
    }
  }
>
  <withRouter(RuleViewForm)
    activityData={
      Object {
        "name": "test",
        "scored_level": "7",
        "target_level": 7,
        "title": "test",
      }
    }
    activityId="1"
    closeModal={[MockFunction]}
    isUniversal={false}
    requestErrors={Array []}
    rule={
      Object {
        "concept_uid": "a34qreadbgt6",
        "feedbacks": Array [
          Object {
            "description": null,
            "highlights": Array [],
            "id": 7,
            "order": 0,
            "rule_id": 1,
            "text": "Revise your work. Delete the phrase \\"it contains methane\\" because it repeats the first part of the sentence",
          },
        ],
        "id": 1,
        "name": "remove all instances of \\"it contains methane\\"",
        "optimal": false,
        "prompt_ids": Array [
          1,
          2,
        ],
        "regex_rules": Array [
          Object {
            "case_sensitive": false,
            "id": 1,
            "regex_text": "it contain(s)? methane gas",
            "rule_id": 1,
            "sequence_type": "incorrect",
          },
          Object {
            "case_sensitive": true,
            "id": 2,
            "regex_text": "another reg(ex) line",
            "rule_id": 1,
            "sequence_type": "required",
          },
          Object {
            "case_sensitive": false,
            "id": 3,
            "regex_text": "some m?ore reg(ex",
            "rule_id": 1,
            "sequence_type": "incorrect",
          },
        ],
        "rule_type": "rules-based-1",
        "state": "active",
        "suborder": 0,
        "universal": false,
      }
    }
    submitRule={[MockFunction]}
  />
</Router>
`;
