version: 2
jobs:
  lms_rails_build:
    working_directory: ~/Empirical-Core
    parallelism: 4
    docker:
      - image: circleci/ruby:2.6.6
        environment:
          PG_DB: quill_test_db
          PG_USER: ubuntu
          RAILS_ENV: test
          RACK_ENV: test
      - image: postgres:10.5-alpine
        environment:
          POSTGRES_USER: ubuntu
          POSTGRES_DB: quill_test_db
          POSTGRES_PASSWORD: ""
    steps:
      - checkout
      - run:
          name: Install node
          command: |
            curl -sSL "https://nodejs.org/download/release/v8.11.3/node-v8.11.3-linux-x64.tar.xz" | sudo tar --strip-components=2 -xJ -C /usr/local/bin/ node-v8.11.3-linux-x64    /bin/node
            curl https://www.npmjs.com/install.sh | sudo bash
      # - restore_cache:
      #     keys:
      #       - bundle-cache-lms-v2-{{ checksum "services/QuillLMS/Gemfile.lock" }}
      #       - bundle-cache-lms-v2
      # - restore_cache:
      #     keys:
      #       - npm-cache-lms-v3-{{ checksum "services/QuillLMS/package.json" }}
      #       - npm-cache-lms-v3-
      # - restore_cache:
      #     keys:
      #       - npm-cache-lms-client-v6{{ checksum "services/QuillLMS/client/package.json" }}-{{ checksum "services/QuillLMS/client/package-lock.json" }}
      #       - npm-cache-lms-client-v6{{ checksum "services/QuillLMS/client/package.json" }}-
      #       - npm-cache-lms-client-v6
      - run:
          name: Bundle Install if cache isn't present.
          command: |
            cd services/QuillLMS
            # BUNDLE_GEMS__CONTRIBSYS__COM defined in https://circleci.com/gh/empirical-org/Empirical-Core/edit#env-vars
            bundle config --local gems.contribsys.com ${BUNDLE_GEMS__CONTRIBSYS__COM}
            bundle check || bundle install --path vendor/bundle
      - run:
          name: NPM install, should be short-cutted if cache is present
          command: |
            cd services/QuillLMS
            npm install && npm run build:test
      - save_cache:
          key: bundle-cache-lms-v2-{{ checksum "services/QuillLMS/Gemfile.lock" }}
          paths:
            - services/QuillLMS/vendor/bundle
      # - save_cache:
      #     key: npm-cache-lms-v3-{{ checksum "services/QuillLMS/package.json" }}
      #     paths:
      #       - services/QuillLMS/node_modules
      # - save_cache:
      #     key: npm-cache-lms-client-v6-{{ checksum "services/QuillLMS/client/package-lock.json" }}-{{ checksum "services/QuillLMS/client/package-lock.json" }}
      #     paths:
      #       - services/QuillLMS/client/node_modules
      - run:
          name: Install postgres dependencies
          command: |
            sudo apt-get update
            sudo apt-cache search postgres
            sudo apt install -y postgresql-client
      - run:
          name: Copy Config files
          command: |
            cd services/QuillLMS
            cp .env-sample .env
            cp config/database.yml.circle config/database.yml
      - run:
          name: Set up DB
          command: |
            cd services/QuillLMS
            bundle exec rake db:structure:load
            bundle exec rake db:migrate
          environment:
            DATABASE_URL: "postgres://ubuntu@localhost:5432/quill_test_db"
      - run:
          name: Run tests
          command: |
            cd services/QuillLMS
            TESTFILES=$(circleci tests glob "spec/**/*_spec.rb" | circleci tests split)
            bundle exec rspec -- ${TESTFILES}
  lms_node_build:
    working_directory: ~/Empirical-Core
    parallelism: 2
    docker:
      - image: circleci/node:8.11.3
    steps:
      - checkout

      - restore_cache:
          keys:
            - npm-cache-lms-client-v6-{{ checksum "services/QuillLMS/client/package.json" }}-{{ checksum "services/QuillLMS/client/package-lock.json" }}
            - npm-cache-lms-client-v6-{{ checksum "services/QuillLMS/client/package.json" }}-
            - npm-cache-lms-client-v6-
      - run:
          name: Install NPM dependencies
          command: |
            cd services/QuillLMS/client
            npm install
      - save_cache:
          key: npm-cache-lms-client-v6-{{ checksum "services/QuillLMS/client/package.json" }}-{{ checksum "services/QuillLMS/client/package-lock.json" }}
          paths:
            - services/QuillLMS/client/node_modules
      - run:
          name: Run LMS Frontend Tests
          command: |
            cd services/QuillLMS/client
            TESTFILES=$(circleci tests glob "app/**/*.test.*" | circleci tests split)
            node --expose-gc ./node_modules/.bin/jest $TESTFILES --maxWorkers=2 --logHeapUsage
  cms_rails_build:
    working_directory: ~/Empirical-Core
    docker:
      - image: ruby:2.6.6
        environment:
          PG_DB: quill_cms_test_db
          PG_USER: ubuntu
          RAILS_ENV: test
          RACK_ENV: test
      - image: postgres:10.5-alpine
        environment:
          POSTGRES_USER: ubuntu
          POSTGRES_DB: quill_cms_test_db
          POSTGRES_PASSWORD: ""
      - image: docker.elastic.co/elasticsearch/elasticsearch:5.6.2
        environment:
          - xpack.security.enabled: false
    steps:
      - checkout
      - restore_cache:
          keys:
            - bundle-cache-cms{{ checksum "services/QuillCMS/Gemfile.lock" }}
      - run:
          name: Bundle Install if cache isn't present.
          command: |
            cd services/QuillCMS
            bundle config --local gems.contribsys.com ${BUNDLE_GEMS__CONTRIBSYS__COM}
            bundle check || bundle install --path vendor/bundle
      - save_cache:
          key: bundle-cache-cms{{ checksum "services/QuillCMS/Gemfile.lock" }}
          paths:
            - services/QuillCMS/vendor/bundle
      - run:
          name: Copy Config files
          command: |
            cd services/QuillCMS
            cp config/database.yml.circle config/database.yml
      - run:
          name: Set up DB
          command: |
            cd services/QuillCMS
            bundle exec rake db:migrate
          environment:
            DATABASE_URL: "postgres://ubuntu@localhost:5432/quill_cms_test_db"
      - run:
          name: Run CMS tests
          command: |
            cd services/QuillCMS
            bundle exec rake spec
  spellchecker_node_build:
    working_directory: ~/Empirical-Core
    docker:
      - image: circleci/node:8.11.3
    steps:
      - checkout
      - run:
          name: Install NPM dependencies
          command: |
            cd packages/quill-spellchecker
            npm install
      - run:
          name: Run Spellchecker Tests
          command: |
            cd packages/quill-spellchecker
            FORCE_COLOR=true npm run test --colors
  marking_logic_node_build:
    working_directory: ~/Empirical-Core
    docker:
      - image: circleci/node:8.11.3
    steps:
      - checkout
      - run:
          name: Install NPM dependencies
          command: |
            cd packages/quill-marking-logic
            npm install
      - run:
          name: Run Marking Logic Tests
          command: |
            cd packages/quill-marking-logic
            FORCE_COLOR=true npm run test --colors
  comprehension_rails_build:
    working_directory: ~/Empirical-Core
    docker:
      - image: circleci/ruby:2.5.1-node
        environment:
          PG_DB: quill_comprehension_db
          PG_USER: ubuntu
          RAILS_ENV: test
          RACK_ENV: test
      - image: postgres:10.5-alpine
        environment:
          POSTGRES_USER: ubuntu
          POSTGRES_DB: quill_comprehension_db
          POSTGRES_PASSWORD: ""
    steps:
      - checkout
      - restore_cache:
          keys:
            - bundle-cache-comprehension-v2-{{ checksum "services/QuillComprehension/Gemfile.lock" }}
            - bundle-cache-comprehension-v2-
      - run:
          name: Bundle Install if cache isn't present.
          command: |
            cd services/QuillComprehension
            bundle check || bundle install --path vendor/bundle
      - save_cache:
          key: bundle-cache-comprehension-v2-{{ checksum "services/QuillComprehension/Gemfile.lock" }}
          paths:
            - services/QuillComprehension/vendor/bundle
      - run:
          name: Copy Config files
          command: |
            cd services/QuillComprehension
            cp config/database.yml.circle config/database.yml
      - run:
          name: Set up DB
          command: |
            cd services/QuillComprehension
            bundle exec rake db:migrate
          environment:
            DATABASE_URL: "postgres://ubuntu@localhost:5432/quill_comprehension_db"
      - run:
          name: Run tests
          command: |
            cd services/QuillComprehension
            bundle exec rake spec
  comprehension_python_build:
    working_directory: ~/Empirical-Core
    docker:
      - image: circleci/python:3.7.4
        environment:
          PG_HOST: "localhost"
          PG_NAME: quill_comprehension_api_db
          PG_USER: ubuntu
          PG_PASS: ""
          PG_PORT: "5432"
          DJANGO_SETTINGS_MODULE: "mysite.settings.circle"
      - image: postgres:10.5-alpine
        environment:
          POSTGRES_USER: ubuntu
          POSTGRES_DB: quill_comprehension_api_db
          POSTGRES_PASSWORD: ""
    steps:
      - checkout
      - run:
          name: Pip Install
          command: |
            cd services/comprehension/main-api
            pip install --user -r requirements.txt.dev
      - run:
          name: Set up DB
          command: |
            cd services/comprehension/main-api
            python manage.py migrate
          environment:
            PG_DB: quill_comprehension_api_db
            PG_USER: ubuntu
            PG_PASS: ""
            DJANGO_SETTINGS_MODULE: "mysite.settings.circle"
      - run:
          name: Run tests
          command: |
            cd services/comprehension/main-api
            python manage.py test
          environment:
            PG_DB: quill_comprehension_api_db
            PG_USER: ubuntu
            PG_PASS: ""
            DJANGO_SETTINGS_MODULE: "mysite.settings.circle"
  node_lint:
    working_directory: ~/Empirical-Core
    docker:
      - image: circleci/node:8.11.3
    steps:
      - checkout
      - run:
          name: Install NPM Dependencies
          command: |
            npm install
      - run:
          name: Run ESlint
          command: |
            npm run eslint
  rubocop_lint:
    working_directory: ~/Empirical-Core
    docker:
      - image: circleci/ruby:2.5.1-node
    steps:
      - checkout
      - run:
          name: Run Rubocop
          command: |
            cd services
            ./rubocop.sh
  flake8_lint:
    working_directory: ~/Empirical-Core
    docker:
      - image: circleci/python:3.7.4
    steps:
      - checkout
      - run:
          name: Pip Install
          command: |
            pip install --user flake8
      - run:
          name: Run Flake8
          command: |
            flake8
workflows:
  version: 2
  build-test:
    jobs:
      - lms_rails_build
      - lms_node_build
      # - marking_logic_node_build
      # - cms_rails_build
      # - spellchecker_node_build
      # - comprehension_rails_build
      # - comprehension_python_build
  # lint-code:
  #   jobs:
  #     - node_lint
  #     - rubocop_lint
  #     - flake8_lint
